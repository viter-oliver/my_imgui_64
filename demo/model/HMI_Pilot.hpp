/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __HMI_Pilot_hpp__
#define __HMI_Pilot_hpp__

#include "HMI_Vehicle_Info.hpp"
#include "HMI_Lane_Lines.hpp"
#include "HMI_Obstacles.hpp"
#include "HMI_Traffic_Light.hpp"
#include "HMI_Traffic_Sign.hpp"
#include "HMI_Map.hpp"
#include "HMI_Ultrasonic_Distances.hpp"
#include "HMI_Path_Planner.hpp"


class HMI_Pilot
{
    public:
        HMI_Vehicle_Info vehicle_info;

        HMI_Lane_Lines lane_lines;

        HMI_Obstacles obstacles[10];

        HMI_Traffic_Light traffic_light;

        HMI_Traffic_Sign traffic_sign[10];

        HMI_Map    map_data;

        HMI_Ultrasonic_Distances ultrasonics[12];

        HMI_Path_Planner path_planner;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "HMI_Pilot"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int HMI_Pilot::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int HMI_Pilot::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int HMI_Pilot::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t HMI_Pilot::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* HMI_Pilot::getTypeName()
{
    return "HMI_Pilot";
}

int HMI_Pilot::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = this->vehicle_info._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->lane_lines._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 10; a0++) {
        tlen = this->obstacles[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = this->traffic_light._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 10; a0++) {
        tlen = this->traffic_sign[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = this->map_data._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 12; a0++) {
        tlen = this->ultrasonics[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = this->path_planner._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int HMI_Pilot::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = this->vehicle_info._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->lane_lines._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 10; a0++) {
        tlen = this->obstacles[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = this->traffic_light._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 10; a0++) {
        tlen = this->traffic_sign[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = this->map_data._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 12; a0++) {
        tlen = this->ultrasonics[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = this->path_planner._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int HMI_Pilot::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->vehicle_info._getEncodedSizeNoHash();
    enc_size += this->lane_lines._getEncodedSizeNoHash();
    for (int a0 = 0; a0 < 10; a0++) {
        enc_size += this->obstacles[a0]._getEncodedSizeNoHash();
    }
    enc_size += this->traffic_light._getEncodedSizeNoHash();
    for (int a0 = 0; a0 < 10; a0++) {
        enc_size += this->traffic_sign[a0]._getEncodedSizeNoHash();
    }
    enc_size += this->map_data._getEncodedSizeNoHash();
    for (int a0 = 0; a0 < 12; a0++) {
        enc_size += this->ultrasonics[a0]._getEncodedSizeNoHash();
    }
    enc_size += this->path_planner._getEncodedSizeNoHash();
    return enc_size;
}

uint64_t HMI_Pilot::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == HMI_Pilot::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)HMI_Pilot::getHash };

    uint64_t hash = 0xa20ebceb500ace1fLL +
         HMI_Vehicle_Info::_computeHash(&cp) +
         HMI_Lane_Lines::_computeHash(&cp) +
         HMI_Obstacles::_computeHash(&cp) +
         HMI_Traffic_Light::_computeHash(&cp) +
         HMI_Traffic_Sign::_computeHash(&cp) +
         HMI_Map::_computeHash(&cp) +
         HMI_Ultrasonic_Distances::_computeHash(&cp) +
         HMI_Path_Planner::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
