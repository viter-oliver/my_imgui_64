/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __exlcm_HMI_Path_Planner_hpp__
#define __exlcm_HMI_Path_Planner_hpp__

#include <lcm/lcm_coretypes.h>

#include "exlcm\HMI_Path_Points.hpp"

namespace exlcm
{

class HMI_Path_Planner
{
    public:
        exlcm::HMI_Path_Points path_points[10];

        /// 自车路径规划
        int16_t    nFollowCarID[3];

        /// 跟车目标ID，没有跟车目标时发-1
        int8_t     nIntersectionFollowCar;

        /// 跟车过路口状态  0:正常行驶; 1:跟车过路口
        int8_t     nLaneChange;

        /// 换道状态   0:keep lane; 1:prepare change left; 2:prepare change right; 3:change left; 4:change right;5:abort;
        int8_t     nAllowChangeLane;

        /// 换道条件是否满足  0:false; 1:true
        int16_t    nNextLaneObstacleID[5];

        /// 换道时目标车道危险障碍物ID，没有障碍物时发-1
        int16_t    nSetSpeedLimit;

        /// 驾驶员设置限速 km/h
        float      recommendspeed;

        /// 推荐车速
        int16_t    nPilotStart;

        /// 进入智驾条件是否满足  0:成功进入智驾状态；1:无法识别车道线
        int16_t    nDTC;

        /// DTC故障码
        int16_t    nThreeLevelWarnng;

        /// 三级报警原因
        int16_t    nWarningLevel[3];

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "HMI_Path_Planner"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int HMI_Path_Planner::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int HMI_Path_Planner::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int HMI_Path_Planner::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t HMI_Path_Planner::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* HMI_Path_Planner::getTypeName()
{
    return "HMI_Path_Planner";
}

int HMI_Path_Planner::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    for (int a0 = 0; a0 < 10; a0++) {
        tlen = this->path_points[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->nFollowCarID[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->nIntersectionFollowCar, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->nLaneChange, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->nAllowChangeLane, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->nNextLaneObstacleID[0], 5);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->nSetSpeedLimit, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->recommendspeed, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->nPilotStart, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->nDTC, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->nThreeLevelWarnng, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->nWarningLevel[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int HMI_Path_Planner::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    for (int a0 = 0; a0 < 10; a0++) {
        tlen = this->path_points[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->nFollowCarID[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->nIntersectionFollowCar, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->nLaneChange, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->nAllowChangeLane, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->nNextLaneObstacleID[0], 5);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->nSetSpeedLimit, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->recommendspeed, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->nPilotStart, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->nDTC, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->nThreeLevelWarnng, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->nWarningLevel[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int HMI_Path_Planner::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    for (int a0 = 0; a0 < 10; a0++) {
        enc_size += this->path_points[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int16_t_encoded_array_size(NULL, 3);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 5);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 3);
    return enc_size;
}

uint64_t HMI_Path_Planner::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == HMI_Path_Planner::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, HMI_Path_Planner::getHash };

    uint64_t hash = 0xde3685d985011179LL +
         exlcm::HMI_Path_Points::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
